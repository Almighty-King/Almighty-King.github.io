<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>2020 年总结</title>
    <link href="/2021/01/01/2020%E6%80%BB%E7%BB%93/"/>
    <url>/2021/01/01/2020%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="这一年做了啥"><a href="#这一年做了啥" class="headerlink" title="这一年做了啥"></a>这一年做了啥</h2><ul><li>做了几个小程序，公司业务调整，没再继续了</li><li>做了几个小游戏，还蛮有意思的</li><li>买了几个基金，持续亏损中。。。</li><li>开始搞课件编辑器，忙是真忙，不过也学到不少东西</li><li>学习了些前端工程化的东西</li><li>学了下 Blender，没有设计天赋，只能说凑活能看</li></ul><h2 id="期望"><a href="#期望" class="headerlink" title="期望"></a>期望</h2><ul><li>希望疫情早日结束，想出去玩</li><li>坚持更新博客，输出倒逼输入</li><li>适当的运动一哈</li><li>再学点新鲜玩意</li><li>大A雄起</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>今年挺忙的，但是过的也挺充实</li><li>希望明年能更好</li></ul>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Phaser 学习笔记</title>
    <link href="/2020/08/16/Phaser/"/>
    <url>/2020/08/16/Phaser/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Phaser.js 是一个开源的 HTML5 游戏框架，专为开发 2D 游戏设计，支持缓动动画和物理引擎，本文是基于 Phaser3 进行开发， 今天咱们写一个小 demo 来了解一下 Phaser 的开发流程</p></blockquote><h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><p> 两种方式 直接引用 cdn 或者 yarn 安装</p><ul><li>使用 cdn<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/phaser@3.55.2/dist/phaser.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>使用 yarn<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn add phaser<br></code></pre></td></tr></table></figure></li></ul><h2 id="2-创建一个游戏实例，为了方便就直接在-html-中引用了"><a href="#2-创建一个游戏实例，为了方便就直接在-html-中引用了" class="headerlink" title="2.创建一个游戏实例，为了方便就直接在 html 中引用了"></a>2.创建一个游戏实例，为了方便就直接在 html 中引用了</h2><blockquote><p>这部分代码就是加载了一个 phaser 的 logo 图片， 然后把它添加到画布中</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Phaser Demo<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/phaser@3.55.2/dist/phaser.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> config = &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">type</span>: <span class="hljs-title class_">Phaser</span>.<span class="hljs-property">AUTO</span>, <span class="hljs-comment">// 渲染器类型 有三种 分别是 canvas 和 webgl 和 auto 自动选择</span></span><br><span class="language-javascript">            <span class="hljs-attr">width</span>: <span class="hljs-number">800</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">height</span>: <span class="hljs-number">600</span>,</span><br><span class="language-javascript">            <span class="hljs-attr">scene</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-attr">preload</span>: preload,</span><br><span class="language-javascript">                <span class="hljs-attr">create</span>: create</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 创建游戏实例</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> game = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phaser</span>.<span class="hljs-title class_">Game</span>(config);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 预加载 在 phaser 中为了更好的管理资源， 我们一般会把资源放在 preload 函数中进行加载</span></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">preload</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">load</span>.<span class="hljs-title function_">setBaseURL</span>(<span class="hljs-string">&#x27;https://labs.phaser.io/assets/&#x27;</span>);</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">load</span>.<span class="hljs-title function_">image</span>(<span class="hljs-string">&#x27;logo&#x27;</span>, <span class="hljs-string">&#x27;sprites/phaser3-logo.png&#x27;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-keyword">function</span> <span class="hljs-title function_">create</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">this</span>.<span class="hljs-property">add</span>.<span class="hljs-title function_">image</span>(<span class="hljs-number">400</span>, <span class="hljs-number">300</span>, <span class="hljs-string">&#x27;logo&#x27;</span>);</span><br><span class="language-javascript">        &#125;</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样就创建一个基本的场景，并且加载了一个图片资源</p><h2 id="3-关于-Phaser-中的资源"><a href="#3-关于-Phaser-中的资源" class="headerlink" title="3. 关于 Phaser 中的资源"></a>3. 关于 Phaser 中的资源</h2><blockquote><p>在 phaser 中， 资源是游戏的基本组成部分， 包括图片、音频、视频等，这些资源都是通过 Phaser 的资源管理器进行加载的</p></blockquote><ul><li>加载资源</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 加载音频</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">load</span>.<span class="hljs-title function_">audio</span>(<span class="hljs-string">&#x27;background-music&#x27;</span>, <span class="hljs-string">&#x27;audio/background-music.mp3&#x27;</span>);<br><br><span class="hljs-comment">// 加载视频</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">load</span>.<span class="hljs-title function_">video</span>(<span class="hljs-string">&#x27;intro-video&#x27;</span>, <span class="hljs-string">&#x27;video/intro-video.mp4&#x27;</span>);<br><br><span class="hljs-comment">// 加载纹理</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">load</span>.<span class="hljs-title function_">texture</span>(<span class="hljs-string">&#x27;texture&#x27;</span>, <span class="hljs-string">&#x27;sprites/texture.png&#x27;</span>);<br><br><span class="hljs-comment">// 加载字体</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">load</span>.<span class="hljs-title function_">font</span>(<span class="hljs-string">&#x27;font&#x27;</span>, <span class="hljs-string">&#x27;fonts/font.ttf&#x27;</span>);<br><br></code></pre></td></tr></table></figure><ul><li>使用资源</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 在 create 函数中使用资源</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">add</span>.<span class="hljs-title function_">image</span>(<span class="hljs-number">400</span>, <span class="hljs-number">300</span>, <span class="hljs-string">&#x27;logo&#x27;</span>);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">add</span>.<span class="hljs-title function_">text</span>(<span class="hljs-number">400</span>, <span class="hljs-number">300</span>, <span class="hljs-string">&#x27;Hello Phaser&#x27;</span>, &#123; <span class="hljs-attr">font</span>: <span class="hljs-string">&#x27;16px&#x27;</span>, <span class="hljs-attr">fill</span>: <span class="hljs-string">&#x27;#000&#x27;</span> &#125;);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">add</span>.<span class="hljs-title function_">sprite</span>(<span class="hljs-number">400</span>, <span class="hljs-number">300</span>, <span class="hljs-string">&#x27;texture&#x27;</span>);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">add</span>.<span class="hljs-title function_">video</span>(<span class="hljs-number">400</span>, <span class="hljs-number">300</span>, <span class="hljs-string">&#x27;intro-video&#x27;</span>);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">add</span>.<span class="hljs-title function_">audio</span>(<span class="hljs-string">&#x27;background-music&#x27;</span>);<br><br></code></pre></td></tr></table></figure><p>这些add到场景中的的对象，我们称为游戏对象。 </p><h2 id="4-游戏对象"><a href="#4-游戏对象" class="headerlink" title="4. 游戏对象"></a>4. 游戏对象</h2><blockquote><p>游戏对象是游戏的基本组成部分， 我们的操作都是基于游戏对象来进行的。   </p></blockquote><p>常见的游戏对象包含以下几种类型：  </p><ul><li>精灵</li><li>文本</li><li>图形</li><li>音频</li><li>视频</li><li>粒子</li><li>物理对象</li></ul><p>以上就是常见的游戏对象类型， 当然还有其他一些不常见的类型， 比如瓦片地图、 瓦片精灵等。</p><h2 id="5-物理引擎"><a href="#5-物理引擎" class="headerlink" title="5. 物理引擎"></a>5. 物理引擎</h2><blockquote><p>物理引擎是游戏开发中非常重要的一部分， 物理引擎可以模拟现实世界中的物理现象， 比如重力、 碰撞、 摩擦力等。   </p></blockquote><p>Phaser 中内置了多种物理引擎， 比如 arcade 、 matter 、 cannon 等。</p><p>物理引擎的引入也比较简单， 我们只需要在创建游戏实例的时候， 通过 physics 属性来指定我们使用的物理引擎即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> config = &#123;<br>    <span class="hljs-attr">type</span>: <span class="hljs-title class_">Phaser</span>.<span class="hljs-property">AUTO</span>,<br>    <span class="hljs-attr">width</span>: <span class="hljs-number">800</span>,<br>    <span class="hljs-attr">height</span>: <span class="hljs-number">600</span>,<br>    <span class="hljs-attr">physics</span>: &#123;<br>        <span class="hljs-attr">default</span>: <span class="hljs-string">&#x27;arcade&#x27;</span>,<br>        <span class="hljs-attr">arcade</span>: &#123;<br>            <span class="hljs-attr">gravity</span>: &#123; <span class="hljs-attr">y</span>: <span class="hljs-number">300</span> &#125;,<br>            <span class="hljs-attr">debug</span>: <span class="hljs-literal">false</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">scene</span>: &#123;<br>        <span class="hljs-attr">preload</span>: preload,<br>        <span class="hljs-attr">create</span>: create<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="6-缓动动画"><a href="#6-缓动动画" class="headerlink" title="6. 缓动动画"></a>6. 缓动动画</h2><blockquote><p>Phaser 内置了缓动动画， 我们可以通过 tween 方法来实现缓动动画。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">this</span>.<span class="hljs-property">tweens</span>.<span class="hljs-title function_">add</span>(&#123;<br>    <span class="hljs-attr">targets</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">logo</span>,<br>    <span class="hljs-attr">x</span>: <span class="hljs-number">600</span>,<br>    <span class="hljs-attr">y</span>: <span class="hljs-number">400</span>,<br>    <span class="hljs-attr">duration</span>: <span class="hljs-number">2000</span>,<br>    <span class="hljs-attr">ease</span>: <span class="hljs-string">&#x27;Power1.easeInOut&#x27;</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>通过上边代码， 我们可以实现一个 logo 图片在 2 秒内从当前位置移动到 (600, 400) 位置， 并且使用 Power1.easeInOut 缓动动画。</p><p>以上就是对 Phaser 中一些概念的基本介绍。剩下的就是结合官网的 demo 和项目再进一步学习。</p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Phaser</tag>
      
      <tag>游戏</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Px2Rem Webpack 插件初试</title>
    <link href="/2020/06/21/px2rem/"/>
    <url>/2020/06/21/px2rem/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在h5开发中，我们做设备兼容经常会用到 rem，通常会有个问题就是 rem 和设计稿 px 之间的转换。正好为了学习一下 Webpack 插件的开发，所以就尝试了下简单写个 Webpack 插件来完成这个转换。</p></blockquote><h1 id="实现逻辑"><a href="#实现逻辑" class="headerlink" title="实现逻辑"></a>实现逻辑</h1><blockquote><p>遍历项目中的 css 文件 正则匹配所有的 px 单位，然后根据传入的换算比例计算为对应的 rem。</p></blockquote><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Px2RemPlugin</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">options</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span> = options;<br>  &#125;<br><br>  <span class="hljs-title function_">apply</span>(<span class="hljs-params">compiler</span>) &#123;<br>    <span class="hljs-comment">// 在 emit 阶段进行处理，emit 是文件生成资源到 output 目录之前执行的钩子，也是能修改资源的最后时机</span><br>    compiler.<span class="hljs-property">hooks</span>.<span class="hljs-property">emit</span>.<span class="hljs-title function_">tapAsync</span>(<span class="hljs-string">&#x27;Px2RemPlugin&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">compilation, callback</span>) =&gt;</span> &#123;<br>      <span class="hljs-keyword">const</span> &#123; remUnit &#125; = <span class="hljs-variable language_">this</span>.<span class="hljs-property">options</span>; <span class="hljs-comment">// rem 单位</span><br>      <span class="hljs-keyword">const</span> &#123; assets &#125; = compilation;<br>      <span class="hljs-comment">// 遍历所有资源文件</span><br>      <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(assets).<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">[filename, source]</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (filename.<span class="hljs-title function_">endsWith</span>(<span class="hljs-string">&#x27;.css&#x27;</span>)) &#123;<br>          <span class="hljs-keyword">const</span> content = source.<span class="hljs-title function_">source</span>();<br>          <span class="hljs-keyword">const</span> newContent = content.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/(\d+)px/g</span>, <span class="hljs-function">(<span class="hljs-params">match, p1</span>) =&gt;</span> &#123;<br>            <span class="hljs-keyword">const</span> pxValue = <span class="hljs-built_in">parseInt</span>(p1, <span class="hljs-number">10</span>);<br>            <span class="hljs-keyword">const</span> remValue = pxValue / remUnit;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;remValue&#125;</span>rem`</span>;<br>          &#125;);<br>          <span class="hljs-comment">// 将修改后的内容替换回资源文件</span><br>          compilation.<span class="hljs-property">assets</span>[filename] = &#123;<br>            <span class="hljs-attr">source</span>: <span class="hljs-function">() =&gt;</span> newContent,<br>            <span class="hljs-attr">size</span>: <span class="hljs-function">() =&gt;</span> newContent.<span class="hljs-property">length</span>,<br>          &#125;;<br>        &#125;<br>      &#125;);<br>      <span class="hljs-title function_">callback</span>();<br>    &#125;);<br>  &#125;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">Px2RemPlugin</span>;<br></code></pre></td></tr></table></figure><h1 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-comment">// ... 其他配置</span><br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-keyword">new</span> <span class="hljs-title class_">Px2RemPlugin</span>(&#123; <span class="hljs-attr">remUnit</span>: <span class="hljs-number">75</span> &#125;)],<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随便记点啥吧</title>
    <link href="/2020/06/19/2020-06-19/"/>
    <url>/2020/06/19/2020-06-19/</url>
    
    <content type="html"><![CDATA[<blockquote><p>写点东西，记录下工作和生活，就当是备忘录吧。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
